CREATE TABLE users (
	id SERIAL NOT NULL, 
	username VARCHAR, 
	hashed_password VARCHAR, 
	active BOOLEAN, 
	read BOOLEAN, 
	write BOOLEAN, 
	mod BOOLEAN, 
	adm BOOLEAN, 
	PRIMARY KEY (id)
);

CREATE TABLE papers (
	id SERIAL NOT NULL, 
	title VARCHAR, 
	content VARCHAR, 
	status INTEGER, 
	modComment VARCHAR, 
	datePublushed DATE, 
	theme VARCHAR, 
	PRIMARY KEY (id)
);

CREATE TABLE UserPaper (
	id SERIAL NOT NULL, 
	UserId INTEGER, 
	PaperId INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(UserId) REFERENCES users (id), 
	FOREIGN KEY(PaperId) REFERENCES papers (id)
);

CREATE TABLE comments (
	id SERIAL NOT NULL, 
	content VARCHAR, 
	paper_id INTEGER, 
	user_id INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(paper_id) REFERENCES papers (id), 
	FOREIGN KEY(user_id) REFERENCES users (id)
);

CREATE TABLE ratings (
	id SERIAL NOT NULL, 
	value INTEGER, 
	user_id INTEGER, 
	paper_id INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES users (id), 
	FOREIGN KEY(paper_id) REFERENCES papers (id)
);


INSERT into users(username, hashed_password, active, read, write, mod, adm )
VALUES('John Smith', 'qwerty', true, true, true, true, true);

INSERT into users(username, hashed_password, active, read, write, mod, adm )
VALUES('Furfin', 'qwerty', true, true, true, true, true);

INSERT into users(username, hashed_password, active, read, write, mod, adm )
VALUES('Water Melon', 'qwerty', true, true, true, true, true);

INSERT into users(username, hashed_password, active, read, write, mod, adm )
VALUES('Monkey D. Luffy', 'qwerty', true, true, true, true, true);

INSERT into users(username, hashed_password, active, read, write, mod, adm )
VALUES('Dr. Vegapunk', 'qwerty', true, true, true, true, true);





INSERT into papers(	title, content, status, modComment, datePublushed, theme)
VALUES('News', 'There are no new news yet, but we will keep you updated on that matter', 3, 'Publish it', '2001-09-28', 'General');

INSERT into papers(	title, content, status, modComment, datePublushed, theme)
VALUES('Is moon made of cheese ?', 'Probably not', 3, 'Publish it', '2003-08-01', 'Science');

INSERT into papers(	title, content, status, modComment, datePublushed, theme)
VALUES('News 2', 'There are still new news, but we will keep you updated on that matter', 3, 'Publish it ?', '2001-10-28', 'General');

INSERT into papers(	title, content, status, modComment, datePublushed, theme)
VALUES('Is moon made of sponge ?', 'Its not', 3, 'Publish it', '2003-08-02', 'Science');

INSERT into papers(	title, content, status, modComment, datePublushed, theme)
VALUES('What is the moon made of ?', 'Probably moon', 3, 'Publish it', '2003-08-03', 'Science');




INSERT into comments( content, paper_id, user_id )
VALUES('What is the moon made of ?', 4, 2);

INSERT into comments( content, paper_id, user_id )
VALUES('Is there any news ?', 1, 3);

INSERT into comments( content, paper_id, user_id )
VALUES('Is there any news ?', 3, 3);

INSERT into comments( content, paper_id, user_id )
VALUES('Yes', 5, 1);

INSERT into comments( content, paper_id, user_id )
VALUES('It is', 5, 1);






INSERT into ratings( value, user_id, paper_id )
VALUES(0, 2, 4);

INSERT into ratings( value, user_id, paper_id )
VALUES(5, 3, 1);

INSERT into ratings( value, user_id, paper_id )
VALUES(4, 3, 4);

INSERT into ratings( value, user_id, paper_id )
VALUES(2, 2, 2);

INSERT into ratings( value, user_id, paper_id )
VALUES(0, 1, 2);

INSERT into ratings( value, user_id, paper_id )
VALUES(1, 2, 3);








INSERT into UserPaper(UserId, PaperId)
VALUES(1, 1);

INSERT into UserPaper(UserId, PaperId)
VALUES(1, 3);

INSERT into UserPaper(UserId, PaperId)
VALUES(5, 2);

INSERT into UserPaper(UserId, PaperId)
VALUES(5, 4);

INSERT into UserPaper(UserId, PaperId)
VALUES(5, 5);

INSERT into UserPaper(UserId, PaperId)
VALUES(5, 1);



CREATE FUNCTION on_delete_trigger() RETURNS trigger
    LANGUAGE plpgsql
	as
	$$
	DECLARE _id_to_delete int;
	begin
		_id_to_delete = OLD.id;
		DELETE FROM userpaper WHERE userpaper.userid=_id_to_delete;
		DELETE FROM comments WHERE comments.user_id=_id_to_delete;
		DELETE FROM ratings WHERE ratings.user_id=_id_to_delete;
		DELETE FROM users WHERE users.id=_id_to_delete;
		RETURN NULL;
	end;
	$$;

CREATE OR REPLACE TRIGGER check_update
    BEFORE DELETE on users
    FOR EACH ROW
	WHEN (pg_trigger_depth() = 0)
    EXECUTE FUNCTION on_delete_trigger();
	
DELETE FROM users WHERE users.id = 3;

SELECT * FROM users;
